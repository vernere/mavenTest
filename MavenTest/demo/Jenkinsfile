pipeline {
    agent any
        environment {
            PATH = "C:\\Program Files\\Docker\\Docker\\resources\\bin;${env.PATH}"

            // Define Docker Hub credentials ID
            DOCKERHUB_CREDENTIALS_ID = '73a53345-c223-4cfc-aa23-0a92815a7a22'
            // Define Docker Hub repository name
            DOCKERHUB_REPO = 'vernere/maventest'
            // Define Docker image tag
            DOCKER_IMAGE_TAG = 'latest'
        }
    tools {
        maven 'Maven3' // Ensure Maven is installed and configured in Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                git branch: 'main', url: 'https://github.com/vernere/mavenTest.git'
            }
        }
        stage('Build') {
            steps {
                echo 'Building...'
                dir('MavenTest/demo') {
                    bat 'mvn clean install'
                }
            }
        }
        stage('Test') {
            steps {
                echo 'Testing...'
                dir('MavenTest/demo') {
                    bat 'mvn test'
                }
            }
        }
        stage('Code coverage') {
            steps {
                echo 'Calculating code coverage...'
                dir('MavenTest/demo') {
                    bat 'mvn jacoco:report'
                }
            }
        }
        stage('Publish test Reports') {
            steps {
                echo 'Publishing reports...'
                junit 'MavenTest/demo/target/surefire-reports/*.xml'
            }
        }
        stage('publish coverage reports') {
            steps {
                echo 'Publishing coverage reports...'
                jacoco()
            }
        }
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    def dockerAvailable = false
                    try {
                        // Check if Docker daemon is accessible
                        def result = bat(script: 'docker version', returnStatus: true)
                        if (result == 0) {
                            dockerAvailable = true
                            echo "Docker is available and accessible"
                        }
                    } catch (Exception e) {
                        echo "Docker daemon not accessible: ${e.getMessage()}"
                    }
                    
                    if (dockerAvailable) {
                        try {
                            dir('MavenTest/demo') {
                                bat """
                                    docker build -t ${DOCKERHUB_REPO}:${DOCKER_IMAGE_TAG} .
                                """
                            }
                            echo "Docker image built successfully"
                        } catch (Exception e) {
                            echo "Docker build failed: ${e.getMessage()}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    } else {
                        echo "SKIPPING Docker build - Docker daemon not accessible"
                        echo "This is likely due to insufficient privileges or Docker not running"
                        echo "To fix this issue:"
                        echo "1. Ensure Docker Desktop is running"
                        echo "2. Run Jenkins as Administrator, or"
                        echo "3. Add Jenkins service account to 'docker-users' group, or"
                        echo "4. Configure Jenkins agent with Docker access"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        stage('Push Docker Image to Docker Hub') {
            when {
                expression { currentBuild.result != 'UNSTABLE' }
            }
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    def dockerAvailable = false
                    try {
                        def result = bat(script: 'docker version', returnStatus: true)
                        if (result == 0) {
                            dockerAvailable = true
                        }
                    } catch (Exception e) {
                        echo "Docker daemon not accessible for push: ${e.getMessage()}"
                    }
                    
                    if (dockerAvailable) {
                        try {
                            withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                                bat """
                                    echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin
                                    docker push ${DOCKERHUB_REPO}:${DOCKER_IMAGE_TAG}
                                """
                            }
                            echo "Docker image pushed successfully"
                        } catch (Exception e) {
                            echo "Docker push failed: ${e.getMessage()}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    } else {
                        echo "SKIPPING Docker push - Docker daemon not accessible"
                        echo "Docker build was likely skipped due to access issues"
                    }
                }
            }
        }
    }
}