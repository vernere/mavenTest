pipeline {
    agent any
        environment {
            PATH = "C:\\Program Files\\Docker\\Docker\\resources\\bin;${env.PATH}"

            // Define Docker Hub credentials ID
            DOCKERHUB_CREDENTIALS_ID = 'Docker_Hub'
            // Define Docker Hub repository name
            DOCKERHUB_REPO = 'vernere/mavenTest'
            // Define Docker image tag
            DOCKER_IMAGE_TAG = 'latest'
        }
    tools {
        maven 'Maven3' // Ensure Maven is installed and configured in Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                git branch: 'main', url: 'https://github.com/vernere/mavenTest.git'
            }
        }
        stage('Build') {
            steps {
                echo 'Building...'
                dir('MavenTest/demo') {
                    bat 'mvn clean install'
                }
            }
        }
        stage('Test') {
            steps {
                echo 'Testing...'
                dir('MavenTest/demo') {
                    bat 'mvn test'
                }
            }
        }
        stage('Code coverage') {
            steps {
                echo 'Calculating code coverage...'
                dir('MavenTest/demo') {
                    bat 'mvn jacoco:report'
                }
            }
        }
        stage('Publish test Reports') {
            steps {
                echo 'Publishing reports...'
                junit 'MavenTest/demo/target/surefire-reports/*.xml'
            }
        }
        stage('publish coverage reports') {
            steps {
                echo 'Publishing coverage reports...'
                jacoco()
            }
        }
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    try {
                        // Check if Docker is available
                        bat 'docker --version'
                        
                        dir('MavenTest/demo') {
                            // Use PowerShell for better Windows Docker integration
                            powershell """
                                \$env:DOCKERHUB_REPO = '${DOCKERHUB_REPO}'
                                \$env:DOCKER_IMAGE_TAG = '${DOCKER_IMAGE_TAG}'
                                docker build -t \$env:DOCKERHUB_REPO:\$env:DOCKER_IMAGE_TAG .
                            """
                        }
                    } catch (Exception e) {
                        echo "Docker build failed: ${e.getMessage()}"
                        echo "This might be due to Docker daemon not running or insufficient permissions"
                        echo "Please ensure Docker Desktop is running and Jenkins has proper permissions"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        stage('Push Docker Image to Docker Hub') {
            when {
                expression { currentBuild.result != 'UNSTABLE' }
            }
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    try {
                        withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                            powershell """
                                \$env:DOCKERHUB_REPO = '${DOCKERHUB_REPO}'
                                \$env:DOCKER_IMAGE_TAG = '${DOCKER_IMAGE_TAG}'
                                docker login -u \$env:DOCKER_USER -p \$env:DOCKER_PASS
                                docker push \$env:DOCKERHUB_REPO:\$env:DOCKER_IMAGE_TAG
                            """
                        }
                    } catch (Exception e) {
                        echo "Docker push failed: ${e.getMessage()}"
                        echo "This might be due to Docker daemon not running or authentication issues"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }
}